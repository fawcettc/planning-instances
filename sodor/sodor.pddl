(define (domain three-way)
    (:predicates (inService ?x ?y)
                         (cleaning ?x)
             (offline ?x)
                         (linked ?x ?y)
                         (at ?x ?y)
                         (in ?x ?y)
             (refuelling ?x)
             (commissioned ?x ?y)
             (base ?x))
    (:action decommissionAndRefuel
        :parameters (?v ?l)
        :precondition (and (inService ?v ?l) (base ?l))
        :effect (and (offline ?v) (refuelling ?v)
                        (not (inService ?v ?l))))
    (:action decommissionAndClean
        :parameters (?v ?l)
        :precondition (and (inService ?v ?l) (base ?l))
        :effect (and (offline ?v) (cleaning ?v)
                        (not (inService ?v ?l))))
    (:action cleanAndRefuel
        :parameters (?v ?l)
        :precondition (and (inService ?v ?l) (base ?l))
        :effect (and (refuelling ?v) (cleaning ?v)
                        (not (inService ?v ?l))))
    (:action commissionFuelled
        :parameters (?v ?l)
        :precondition (and (offline ?v) (refuelling ?v)(base ?l))
        :effect (and (not (offline ?v))
                        (not (refuelling ?v))
                                (inService ?v ?l)))
    (:action commissionClean
        :parameters (?v ?l)
        :precondition (and (offline ?v) (cleaning ?v)(base ?l))
        :effect (and (not (offline ?v))
                        (not (cleaning ?v))
                                (inService ?v ?l)))
    (:action commission
        :parameters (?v ?l)
        :precondition (and (refuelling ?v) (cleaning ?v)(base ?l))
        :effect (and (not (refuelling ?v))
                        (not (cleaning ?v))
                                (inService ?v ?l)))
    (:action drive
        :parameters (?v ?l1 ?l2)
        :precondition (and (inService ?v ?l1) (linked ?l1 ?l2))
        :effect (and (inService ?v ?l2) (not (inService ?v ?l1))))
    (:action load
        :parameters (?v ?o ?l)
        :precondition (and (inService ?v ?l) (at ?o ?l))
        :effect (and (in ?o ?v) (not (at ?o ?l))))
    (:action unload
        :parameters (?v ?o ?l)
        :precondition (and (inService ?v ?l) (in ?o ?v))
        :effect (and (at ?o ?l) (not (in ?o ?v))))
)
